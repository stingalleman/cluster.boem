#!/usr/sbin/nft -f

flush ruleset

define DEV_LAN = eth1
define DEV_WAN = eth0
define NET_LAN = 10.10.0.0/16

define DEV_IXP = { "eth2" }

# ip, arp, ip6, bridge, inet, netdev. It defaults to ip.
table inet global {
  chain inbound_wan {
    # allow SSH connections from some well-known internet host
    # ip saddr 81.209.165.42 tcp dport 22 accept
    tcp dport 22 meta nftrace set 1 accept
  }

  chain inbound_lan {
    # allow DHCP, DNS and SSH from the LAN network
    # ip protocol . th dport vmap { tcp . 22 : accept, udp . 53 : accept, tcp . 53 : accept, udp . 67 : accept}

    # accept SSH
    tcp dport 22 accept
  }

  chain inbound_ixp {
    drop
  }

  chain outbound_ixp {
    # accept icmp echo-request
    icmp type echo-request limit rate 5/second accept
    icmpv6 type echo-request limit rate 5/second accept

    # ipv6 neighbor stuff
    icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert } accept

    # allow BGP
    tcp dport 179 accept

    drop
  }

  chain inbound {
    type filter hook input priority 0; policy drop;

    # Allow traffic from established and related packets, drop invalid
    ct state vmap { established : accept, related : accept, invalid : drop }

    # accept icmp echo-request
    icmp type echo-request limit rate 5/second accept
    icmpv6 type echo-request limit rate 5/second accept

    # ipv6 neighbor stuff
    icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert } accept

    # allow loopback traffic
    iifname lo accept
    iifname $DEV_WAN jump inbound_wan
    iifname $DEV_LAN jump inbound_lan

    # jump to inbound_ixp
    iifname $DEV_IXP jump inbound_ixp

    # the rest is dropped by the above policy
  }

  chain forward {
    type filter hook forward priority 0; policy drop;

    # Allow traffic from established and related packets, drop invalid
    ct state vmap { established : accept, related : accept, invalid : drop }

    # accept icmp echo-request
    icmp type echo-request limit rate 5/second accept
    icmpv6 type echo-request limit rate 5/second accept

    # ipv6 neighbor stuff
    icmpv6 type { nd-neighbor-solicit, nd-neighbor-advert } accept

    # connections to and from ixp nets are not allowed
    iifname $DEV_IXP drop
    oifname $DEV_IXP drop

    # connections from the internal net to the internet or to other
    # internal nets are allowed
    iifname $DEV_LAN accept

    # the rest is dropped by the above policy
  }

  chain outbound {
    type filter hook output priority 0; policy accept;

    # jump to outbound_ixp
    oifname $DEV_IXP jump outbound_ixp
  }

  chain postrouting {
    type nat hook postrouting priority 100; policy accept;

    # masquerade LAN IP addresses
    ip saddr $NET_LAN oifname $DEV_WAN masquerade
  }
}