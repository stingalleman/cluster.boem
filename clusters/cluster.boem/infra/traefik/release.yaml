apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: traefik-ingress
  namespace: traefik
spec:
  chart:
    spec:
      chart: traefik
      sourceRef:
        kind: HelmRepository
        name: traefik
        namespace: flux-system
      version: "34.4.1"
  interval: 24h
  values:
    deployment:
      replicas: 3

    ingressRoute:
      dashboard:
        # -- Create an IngressRoute for the dashboard
        enabled: false
        # -- Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class)
        annotations: {}
        # -- Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels)
        labels: {}
        # -- The router match rule used for the dashboard ingressRoute
        matchRule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
        # -- The internal service used for the dashboard ingressRoute
        services:
          - name: api@internal
            kind: TraefikService
        # -- Specify the allowed entrypoints to use for the dashboard ingress route, (e.g. traefik, web, websecure).
        # By default, it's using traefik entrypoint, which is not exposed.
        # /!\ Do not expose your dashboard without any protection over the internet /!\
        entryPoints: ["traefik"]
        # -- Additional ingressRoute middlewares (e.g. for authentication)
        middlewares: []
        # -- TLS options (e.g. secret containing certificate)
        tls: {}
      healthcheck:
        # -- Create an IngressRoute for the healthcheck probe
        enabled: false
        # -- Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class)
        annotations: {}
        # -- Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels)
        labels: {}
        # -- The router match rule used for the healthcheck ingressRoute
        matchRule: PathPrefix(`/ping`)
        # -- The internal service used for the healthcheck ingressRoute
        services:
          - name: ping@internal
            kind: TraefikService
        # -- Specify the allowed entrypoints to use for the healthcheck ingress route, (e.g. traefik, web, websecure).
        # By default, it's using traefik entrypoint, which is not exposed.
        entryPoints: ["traefik"]
        # -- Additional ingressRoute middlewares (e.g. for authentication)
        middlewares: []
        # -- TLS options (e.g. secret containing certificate)
        tls: {}

    providers: # @schema additionalProperties: false
      kubernetesCRD:
        # -- Load Kubernetes IngressRoute provider
        enabled: true
        # -- Allows IngressRoute to reference resources in namespace other than theirs
        allowCrossNamespace: true
        # -- Allows to reference ExternalName services in IngressRoute
        allowExternalNameServices: true
        # -- Allows to return 503 when there is no endpoints available
        allowEmptyServices: true
        # -- When the parameter is set, only resources containing an annotation with the same value are processed. Otherwise, resources missing the annotation, having an empty value, or the value traefik are processed. It will also set required annotation on Dashboard and Healthcheck IngressRoute when enabled.
        ingressClass: ""
        # -- Defines whether to use Native Kubernetes load-balancing mode by default.
        nativeLBByDefault: false

      kubernetesIngress:
        # -- Load Kubernetes Ingress provider
        enabled: true
        # -- Allows to reference ExternalName services in Ingress
        allowExternalNameServices: false
        # -- Allows to return 503 when there is no endpoints available
        allowEmptyServices: true
        # -- When ingressClass is set, only Ingresses containing an annotation with the same value are processed. Otherwise, Ingresses missing the annotation, having an empty value, or the value traefik are processed.
        ingressClass: # @schema type:[string, null]
        # labelSelector: environment=production,method=traefik
        # -- Array of namespaces to watch. If left empty, Traefik watches all namespaces.
        namespaces: []
        # IP used for Kubernetes Ingress endpoints
        publishedService:
          # -- Enable [publishedService](https://doc.traefik.io/traefik/providers/kubernetes-ingress/#publishedservice)
          enabled: true
          # -- Override path of Kubernetes Service used to copy status from. Format: namespace/servicename.
          # Default to Service deployed with this Chart.
          pathOverride: ""
        # -- Defines whether to use Native Kubernetes load-balancing mode by default.
        nativeLBByDefault: false

      kubernetesGateway:
        # -- Enable Traefik Gateway provider for Gateway API
        enabled: false
        # -- Toggles support for the Experimental Channel resources (Gateway API release channels documentation).
        # This option currently enables support for TCPRoute and TLSRoute.
        experimentalChannel: false
        # -- Array of namespaces to watch. If left empty, Traefik watches all namespaces.
        namespaces: []
        # -- A label selector can be defined to filter on specific GatewayClass objects only.
        labelselector: ""
        # -- Defines whether to use Native Kubernetes load-balancing mode by default.
        nativeLBByDefault: false
        statusAddress:
          # -- This IP will get copied to the Gateway status.addresses, and currently only supports one IP value (IPv4 or IPv6).
          ip: ""
          # -- This Hostname will get copied to the Gateway status.addresses.
          hostname: ""
          # -- The Kubernetes service to copy status addresses from. When using third parties tools like External-DNS, this option can be used to copy the service loadbalancer.status (containing the service's endpoints IPs) to the gateways. Default to Service of this Chart.
          service:
            enabled: true
            name: ""
            namespace: ""

    logs:
      general:
        # -- Set [logs format](https://doc.traefik.io/traefik/observability/logs/#format)
        format: # @schema enum:["common", "json", null]; type:[string, null]; default: "common"
        # By default, the level is set to INFO.
        # -- Alternative logging levels are TRACE, DEBUG, INFO, WARN, ERROR, FATAL, and PANIC.
        level: "INFO" # @schema enum:[TRACE,DEBUG,INFO,WARN,ERROR,FATAL,PANIC]; default: "INFO"
        # -- To write the logs into a log file, use the filePath option.
        filePath: ""
        # -- When set to true and format is common, it disables the colorized output.
        noColor: false
      access:
        # -- To enable access logs
        enabled: true
        # -- Set [access log format](https://doc.traefik.io/traefik/observability/access-logs/#format)
        format: # @schema enum:["common", "json", null]; type:[string, null]; default: "common"
        # filePath: "/var/log/traefik/access.log
        # -- Set [bufferingSize](https://doc.traefik.io/traefik/observability/access-logs/#bufferingsize)
        bufferingSize: # @schema type:[integer, null]
        # -- Set [filtering](https://docs.traefik.io/observability/access-logs/#filtering)
        filters: # @schema additionalProperties: false
          # -- Set statusCodes, to limit the access logs to requests with a status codes in the specified range
          statuscodes: ""
          # -- Set retryAttempts, to keep the access logs when at least one retry has happened
          retryattempts: false
          # -- Set minDuration, to keep access logs when requests take longer than the specified duration
          minduration: ""
        # -- Enables accessLogs for internal resources. Default: false.
        addInternals: false
        fields:
          general:
            # -- Set default mode for fields.names
            defaultmode: keep # @schema enum:[keep, drop, redact]; default: keep
            # -- Names of the fields to limit.
            names: {}
          # -- [Limit logged fields or headers](https://doc.traefik.io/traefik/observability/access-logs/#limiting-the-fieldsincluding-headers)
          headers:
            # -- Set default mode for fields.headers
            defaultmode: keep # @schema enum:[keep, drop, redact]; default: drop
            names:
              User-Agent: redact
              Authorization: drop
              Content-Type: keep

    metrics:
      # -- Enable metrics for internal resources. Default: false
      addInternals: false

      ## Prometheus is enabled by default.
      ## It can be disabled by setting "prometheus: null"
      prometheus:
        # -- Entry point used to expose metrics.
        entryPoint: metrics
        # -- Enable metrics on entry points. Default: true
        addEntryPointsLabels: # @schema type:[boolean, null]
        # -- Enable metrics on routers. Default: false
        addRoutersLabels: # @schema type:[boolean, null]
        # -- Enable metrics on services. Default: true
        addServicesLabels: # @schema type:[boolean, null]
        # -- Buckets for latency metrics. Default="0.1,0.3,1.2,5.0"
        buckets: ""
        # -- When manualRouting is true, it disables the default internal router in
        ## order to allow creating a custom router for prometheus@internal service.
        manualRouting: false
        # -- Add HTTP header labels to metrics. See EXAMPLES.md or upstream doc for usage.
        headerLabels: {} # @schema type:[object, null]
        service:
          # -- Create a dedicated metrics service to use with ServiceMonitor
          enabled: false
          labels: {}
          annotations: {}
        # -- When set to true, it won't check if Prometheus Operator CRDs are deployed
        disableAPICheck: # @schema type:[boolean, null]
        serviceMonitor:
          # -- Enable optional CR for Prometheus Operator. See EXAMPLES.md for more details.
          enabled: false
          metricRelabelings: []
          relabelings: []
          jobLabel: ""
          interval: ""
          honorLabels: false
          scrapeTimeout: ""
          honorTimestamps: false
          enableHttp2: false
          followRedirects: false
          additionalLabels: {}
          namespace: ""
          namespaceSelector: {}
        prometheusRule:
          # -- Enable optional CR for Prometheus Operator. See EXAMPLES.md for more details.
          enabled: false
          additionalLabels: {}
          namespace: ""

      #  datadog:
      #    ## Address instructs exporter to send metrics to datadog-agent at this address.
      #    address: "127.0.0.1:8125"
      #    ## The interval used by the exporter to push metrics to datadog-agent. Default=10s
      #    # pushInterval: 30s
      #    ## The prefix to use for metrics collection. Default="traefik"
      #    # prefix: traefik
      #    ## Enable metrics on entry points. Default=true
      #    # addEntryPointsLabels: false
      #    ## Enable metrics on routers. Default=false
      #    # addRoutersLabels: true
      #    ## Enable metrics on services. Default=true
      #    # addServicesLabels: false
      #  influxdb2:
      #    ## Address instructs exporter to send metrics to influxdb v2 at this address.
      #    address: localhost:8086
      #    ## Token with which to connect to InfluxDB v2.
      #    token: xxx
      #    ## Organisation where metrics will be stored.
      #    org: ""
      #    ## Bucket where metrics will be stored.
      #    bucket: ""
      #    ## The interval used by the exporter to push metrics to influxdb. Default=10s
      #    # pushInterval: 30s
      #    ## Additional labels (influxdb tags) on all metrics.
      #    # additionalLabels:
      #    #   env: production
      #    #   foo: bar
      #    ## Enable metrics on entry points. Default=true
      #    # addEntryPointsLabels: false
      #    ## Enable metrics on routers. Default=false
      #    # addRoutersLabels: true
      #    ## Enable metrics on services. Default=true
      #    # addServicesLabels: false
      #  statsd:
      #    ## Address instructs exporter to send metrics to statsd at this address.
      #    address: localhost:8125
      #    ## The interval used by the exporter to push metrics to influxdb. Default=10s
      #    # pushInterval: 30s
      #    ## The prefix to use for metrics collection. Default="traefik"
      #    # prefix: traefik
      #    ## Enable metrics on entry points. Default=true
      #    # addEntryPointsLabels: false
      #    ## Enable metrics on routers. Default=false
      #    # addRoutersLabels: true
      #    ## Enable metrics on services. Default=true
      #    # addServicesLabels: false
      otlp:
        # -- Set to true in order to enable the OpenTelemetry metrics
        enabled: false
        # -- Enable metrics on entry points. Default: true
        addEntryPointsLabels: # @schema type:[boolean, null]
        # -- Enable metrics on routers. Default: false
        addRoutersLabels: # @schema type:[boolean, null]
        # -- Enable metrics on services. Default: true
        addServicesLabels: # @schema type:[boolean, null]
        # -- Explicit boundaries for Histogram data points. Default: [.005, .01, .025, .05, .1, .25, .5, 1, 2.5, 5, 10]
        explicitBoundaries: []
        # -- Interval at which metrics are sent to the OpenTelemetry Collector. Default: 10s
        pushInterval: ""
        http:
          # -- Set to true in order to send metrics to the OpenTelemetry Collector using HTTP.
          enabled: false
          # -- Format: <scheme>://<host>:<port><path>. Default: http://localhost:4318/v1/metrics
          endpoint: ""
          # -- Additional headers sent with metrics by the reporter to the OpenTelemetry Collector.
          headers: {}
          ## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.
          tls:
            # -- The path to the certificate authority, it defaults to the system bundle.
            ca: ""
            # -- The path to the public certificate. When using this option, setting the key option is required.
            cert: ""
            # -- The path to the private key. When using this option, setting the cert option is required.
            key: ""
            # -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.
            insecureSkipVerify: # @schema type:[boolean, null]
        grpc:
          # -- Set to true in order to send metrics to the OpenTelemetry Collector using gRPC
          enabled: false
          # -- Format: <scheme>://<host>:<port><path>. Default: http://localhost:4318/v1/metrics
          endpoint: ""
          # -- Allows reporter to send metrics to the OpenTelemetry Collector without using a secured protocol.
          insecure: false
          ## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.
          tls:
            # -- The path to the certificate authority, it defaults to the system bundle.
            ca: ""
            # -- The path to the public certificate. When using this option, setting the key option is required.
            cert: ""
            # -- The path to the private key. When using this option, setting the cert option is required.
            key: ""
            # -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.
            insecureSkipVerify: false

    ## Tracing
    # -- https://doc.traefik.io/traefik/observability/tracing/overview/
    tracing: # @schema additionalProperties: false
      # -- Enables tracing for internal resources. Default: false.
      addInternals: false
      # -- Service name used in selected backend. Default: traefik.
      serviceName: # @schema type:[string, null]
      # -- Defines additional resource attributes to be sent to the collector.
      resourceAttributes: {}
      # -- Defines the list of request headers to add as attributes. It applies to client and server kind spans.
      capturedRequestHeaders: []
      # -- Defines the list of response headers to add as attributes. It applies to client and server kind spans.
      capturedResponseHeaders: []
      # -- By default, all query parameters are redacted. Defines the list of query parameters to not redact.
      safeQueryParams: []
      # -- The proportion of requests to trace, specified between 0.0 and 1.0. Default: 1.0.
      sampleRate: # @schema type:[number, null]; minimum:0; maximum:1
      otlp:
        # -- See https://doc.traefik.io/traefik/v3.0/observability/tracing/opentelemetry/
        enabled: false
        http:
          # -- Set to true in order to send metrics to the OpenTelemetry Collector using HTTP.
          enabled: false
          # -- Format: <scheme>://<host>:<port><path>. Default: http://localhost:4318/v1/metrics
          endpoint: ""
          # -- Additional headers sent with metrics by the reporter to the OpenTelemetry Collector.
          headers: {}
          ## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.
          tls:
            # -- The path to the certificate authority, it defaults to the system bundle.
            ca: ""
            # -- The path to the public certificate. When using this option, setting the key option is required.
            cert: ""
            # -- The path to the private key. When using this option, setting the cert option is required.
            key: ""
            # -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.
            insecureSkipVerify: false
        grpc:
          # -- Set to true in order to send metrics to the OpenTelemetry Collector using gRPC
          enabled: false
          # -- Format: <scheme>://<host>:<port><path>. Default: http://localhost:4318/v1/metrics
          endpoint: ""
          # -- Allows reporter to send metrics to the OpenTelemetry Collector without using a secured protocol.
          insecure: false
          ## Defines the TLS configuration used by the reporter to send metrics to the OpenTelemetry Collector.
          tls:
            # -- The path to the certificate authority, it defaults to the system bundle.
            ca: ""
            # -- The path to the public certificate. When using this option, setting the key option is required.
            cert: ""
            # -- The path to the private key. When using this option, setting the cert option is required.
            key: ""
            # -- When set to true, the TLS connection accepts any certificate presented by the server regardless of the hostnames it covers.
            insecureSkipVerify: false

    ports:
      traefik:
        port: 8080
        # -- Use hostPort if set.
        hostPort: # @schema type:[integer, null]; minimum:0
        # -- Use hostIP if set. If not set, Kubernetes will default to 0.0.0.0, which
        # means it's listening on all your interfaces and all your IPs. You may want
        # to set this value if you need traefik to listen on specific interface
        # only.
        hostIP: # @schema type:[string, null]

        # Defines whether the port is exposed if service.type is LoadBalancer or
        # NodePort.
        #
        # -- You SHOULD NOT expose the traefik port on production deployments.
        # If you want to access it from outside your cluster,
        # use `kubectl port-forward` or create a secure ingress
        expose:
          default: false
        # -- The exposed port for this service
        exposedPort: 8080
        # -- The port protocol (TCP/UDP)
        protocol: TCP
      web:
        ## -- Enable this entrypoint as a default entrypoint. When a service doesn't explicitly set an entrypoint it will only use this entrypoint.
        asDefault: true
        port: 8000
        # hostPort: 8000
        # containerPort: 8000
        expose:
          default: true
          internal: false
        exposedPort: 80
        ## -- Different target traefik port on the cluster, useful for IP type LB
        targetPort: # @schema type:[string, integer, null]; minimum:0
        # The port protocol (TCP/UDP)
        protocol: TCP
        # -- See [upstream documentation](https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport)
        nodePort: # @schema type:[integer, null]; minimum:0
        redirections:
          # -- Port Redirections
          # Added in 2.2, one can make permanent redirects via entrypoints.
          # Same sets of parameters: to, scheme, permanent and priority.
          # https://docs.traefik.io/routing/entrypoints/#redirection
          entryPoint:
            to: websecure
            scheme: https
            permanent: true
        forwardedHeaders:
          # -- Trust forwarded headers information (X-Forwarded-*).
          trustedIPs: []
          insecure: false
        proxyProtocol:
          # -- Enable the Proxy Protocol header parsing for the entry point
          trustedIPs: []
          insecure: false
        # -- Set transport settings for the entrypoint; see also
        # https://doc.traefik.io/traefik/routing/entrypoints/#transport
        transport:
          respondingTimeouts:
            readTimeout: # @schema type:[string, integer, null]
            writeTimeout: # @schema type:[string, integer, null]
            idleTimeout: # @schema type:[string, integer, null]
          lifeCycle:
            requestAcceptGraceTimeout: # @schema type:[string, integer, null]
            graceTimeOut: # @schema type:[string, integer, null]
          keepAliveMaxRequests: # @schema type:[integer, null]; minimum:0
          keepAliveMaxTime: # @schema type:[string, integer, null]
      websecure:
        port: 8443
        expose:
          default: true
          internal: false
        exposedPort: 443
        protocol: TCP
        # forwardedHeaders:
        #   # -- Trust forwarded headers information (X-Forwarded-*).
        #   trustedIPs: []
        #   insecure: false
        tls:
          enabled: true
      internal:
        port: 9080
        expose:
          default: false
          internal: true
        exposedPort: 80
        protocol: TCP
        redirections:
          entryPoint:
            to: internalsecure
            scheme: https
            permanent: false
      internalsecure:
        port: 9443
        expose:
          default: false
          internal: true
        exposedPort: 443
        protocol: TCP
        tls:
          enabled: true
      ldap:
        port: 9383
        expose:
          default: false
          internal: true
        exposedPort: 389
        protocol: TCP
      ldapsecure:
        port: 9636
        expose:
          default: false
          internal: true
        exposedPort: 636
        protocol: TCP
      irc:
        port: 6667
        expose:
          default: true
          internal: false
        exposedPort: 6667
        protocol: TCP
      ircsecure:
        port: 6697
        expose:
          default: true
          internal: false
        exposedPort: 6697
        protocol: TCP
      dns-udp:
        port: 53
        expose:
          default: true
          internal: false
        exposedPort: 53
        protocol: UDP
      dns-tcp:
        port: 53
        expose:
          default: true
          internal: false
        exposedPort: 53
        protocol: TCP
      metrics:
        # -- When using hostNetwork, use another port to avoid conflict with node exporter:
        # https://github.com/prometheus/prometheus/wiki/Default-port-allocations
        port: 9100
        # -- You may not want to expose the metrics port on production deployments.
        # If you want to access it from outside your cluster,
        # use `kubectl port-forward` or create a secure ingress
        expose:
          default: false
          internal: true
        # -- The exposed port for this service
        exposedPort: 9100
        # -- The port protocol (TCP/UDP)
        protocol: TCP

    service:
      enabled: true
      ## -- Single service is using `MixedProtocolLBService` feature gate.
      ## -- When set to false, it will create two Service, one for TCP and one for UDP.
      single: true
      type: LoadBalancer
      # -- Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific config)
      annotations:
        lbipam.cilium.io/ips: "45.83.205.8,2a07:54c7:5201:6e6f::a"
        lbipam.cilium.io/sharing-key: "8-share"
        lbipam.cilium.io/sharing-cross-namespace: "*"
      # -- Additional annotations for TCP service only
      annotationsTCP: {}
      # -- Additional annotations for UDP service only
      annotationsUDP: {}
      # -- Additional service labels (e.g. for filtering Service by custom labels)
      labels:
        lb-pool: external
      # -- Additional entries here will be added to the service spec.
      # -- Cannot contain type, selector or ports entries.
      spec:
        externalTrafficPolicy: Local
      # loadBalancerIP: "1.2.3.4"
      # clusterIP: "2.3.4.5"
      loadBalancerSourceRanges: []
      # - 192.168.0.1/32
      # - 172.16.0.0/16
      ## -- Class of the load balancer implementation
      # loadBalancerClass: service.k8s.aws/nlb
      externalIPs: []
      # - 1.2.3.4
      ## One of SingleStack, PreferDualStack, or RequireDualStack.
      ipFamilyPolicy: RequireDualStack
      ## List of IP families (e.g. IPv4 and/or IPv6).
      ## ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
      ipFamilies:
        - IPv4
        - IPv6
      ##
      additionalServices:
        ## -- An additional and optional internal Service.
        ## Same parameters as external Service
        internal:
          type: LoadBalancer
          annotations:
            io.cilium/lb-ipam-ips: "10.10.102.250,2a07:54c7:5201:7e6f::2000"
          labels:
            lb-pool: external
          spec:
            externalTrafficPolicy: Local
          ipFamilyPolicy: RequireDualStack
          ipFamilies:
            - IPv4
            - IPv6

    autoscaling:
      # -- Create HorizontalPodAutoscaler object.
      # See EXAMPLES.md for more details.
      enabled: false
